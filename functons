#! /bin/sh

# Called functons because "functions" is ... something else

# sorted by strcmp of function name

# x

y ()
{
# Go to a directory (or here), then scrub, tag, list and stat it
	dir=
	if [ -d "$1" ] 
	then
		dir="$1"
		shift
	fi
	if [ -z "$dir" ]
	then
		dir=`pwd`
	fi
	if [[ $dir != `pwd` ]]
	then
		old=$OLDPWD
		back=`pwd`
		cd $dir >> /dev/null
	fi
	clear
	ry
	clean quietly
	tags >> /dev/null
	pwd
	ly $*
	stat
	if [[ -n $back ]]
	then
		cd $back >> /dev/null
		export OLDPWD=$old
	fi
}

# xx

ag ()
{
	alias | grep $*
}

cj ()
{
# commit jab
	svn ci ~/.jab -m"$*"
}


kd ()
{ 
# cd to filename as well as directory
	echo $* | grep -q " st" && show_more=true || show_more=false 
	args=`echo $* | sed -e"s/ st//"`
	destination=`python ~/.jab/python/kd.py $args 2>&1`
	first_word=`echo "$destination" | cut -d\   -f1`
	if [[ "x$first_word" == "xError" ]]
	then
		echo $destination
	else
		if [[ $destination != $1 ]]
		then
			echo "cd $destination"
		fi
		cd "$destination"
	fi
	# $show_more && st 
}

ru ()
{
# do da root root route, do da ru !
	if [ -z "$*" ]
	then 
		sudo -i
	else
		sudo $*
	fi
}

uj ()
{
# update jab
	PWD=`pwd`
	if [ $PWD != "$HOME/.jab" ]
	then
		jj
	else
		PWD=
	fi
	. bashrc
	if [ -n $PWD ]
	then
		c-
	fi
}

# xxx

cls ()
{
# clean, clear, ls
	rf quietly
	clear
	if [ -z "$*" ]
	then
	    ls -d `pwd`
	    echo
	fi
	ls $*
}

fsh ()
{
# run fred by his extension
	if [ -f fred.sh ]
	then
		sh fred.sh $*
	elif [ -f fred.py ]
	then
		p fred.py $*
	elif [ -f "fred.test" ]
	then
		try "fred.test" $*
	elif [ -f fred.c ]
	then
		/bin/rm -vf a.out
		gcc fred.c
		if [ -f a.out ]
		then
			./a.out
		fi
	else
		sh fred $*
	fi
}

fpy ()
{
# run fred.py if fred.sh exists
	if [ -f fred.py ]
	then
		p fred.py $*
	fi
}

. $JAB/bin/first_dir

llt ()
{
	first_dir $*
	ls -lhtr $dir | tail
}

lly ()
{
	ll *.tests
	echo
	ll *.test
	echo
	ll *.py
}

try ()
{
	TRY=~/.jab/python/try.py
	test -f ./try.py && TRY=./try.py
	p $TRY $*
}

upj ()
{
# update jab from the repository
	if [[ `svn up ~/.jab | grep -v "At revision" | wc -l` != "0" ]]
	then
		uj
	fi
}

vff ()
{
	FRED=
	found_fred=0
	test -f fred && FRED=fred
	if [[ -n $FRED ]]
	then
		found_fred=1
	fi
	found_wild=0
	for f in fred*[^~]
	do
		test -f $f && found_wild=1
	done
	if [[ $found_fred == 1 && $found_wild == 1 ]]
	then 
		v -p fred fred*[^~]
	elif [[ $found_wild == 1 ]]
	then 
		v -p fred*[^~] 
	else
		v fred
	fi
}

# xxxx

dark ()
{
	svn revert -q ~/.jab/vim/vimrc
}

stat ()
{
	if [[ -z "$1" ]]
	then
		clean quietly
		do_stat
	else
		for file in $*
		do 
			do_stat $file
		done
	fi
}

# xxxxx

build ()
{
	if [[ $USER == "jab" ]]
	then
		user=builder
	else
		user=$USER
	fi
	if [[ -n "$1" && "$1" == "2" ]]
	then
		ssh $user@ie-build-2
	elif [[ "$HOSTNAME" == "ie-build-1" ]]
	then
		ssh $user@ie-build-2
	else
		ssh $user@ie-build-1
	fi
}

kodos ()
{
	pushd /home/builder/Download/ie-build-1/kodos-2.4.9/ >/dev/null
	/usr/bin/python kodos.py &
	popd >/dev/null
}

track ()
{
	if [ -d ~/alans_tests ]
	then
		cd ~/alans_tests
		try
	else
		ssh abrogan@ie-track-1
	fi
}

vfile ()
{
	`echo "$*" | sed -e"s/up to //" -e"s/^File/fim/" | sed -e"s/, line \([0-9]*\).*/ +\1/"`
}

which ()
{ 
	( alias; declare -f ) | \
		$WHICH --tty-only --read-alias --read-functions --show-tilde --show-dot $@
}

# xxxxx

# xxxxxx

bright ()
{
	sed -i -e/color/d ~/.vimrc
}

revert ()
{
	cp $1 $1.changed
	svn revert $1
}

# xxxxxxx

do_stat ()
{
	test -n "$1" && path=$1 || path="."
	if [[ -f $path || -d $path/.svn ]]
	then
		svn stat $path
	fi
}

statvim ()
{
	if [[ -z "$1" ]]
	then
		clean quietly
		do_stat | sed -e "s/^M/shd/" -e "s/^A/vim/" -e"s/^?/r/"
	else
		for file in $*
		do 
			do_stat $file | sed -e "s/^M/shd/" -e "s/^A/vim/"
		done
	fi
}

svn_log ()
{
	if [ -n "$1" ]
	then
		if [[ -f $1 || -d $1 ]]
		then
			path=$1
			shift 
		fi
	else
		path="."
	fi
	svn log $path | head $*
}

svn_url ()
{
	test -n "$1" && dir=$1 || dir="."
	svn info $dir | grep URL
}

# xxxxxxxx

svn_diff () {
	dir=`dirname $2`
	file=`basename $2`
	pushd "$dir" > /dev/null
	if [[ "$1" == "vimdiff -o" ]]
	then 
		exe="/usr/bin/vimdiff -o"
	elif [[ -f $1 ]]
	then 
		exe="$1"
	elif [[ -f /usr/bin/$1 ]]
	then
		exe=/usr/bin/$1
	fi
	$exe "$file" .svn/text-base/"$file".svn-base
	popd > /dev/null
}

svn_info ()
{
	test -n "$1" && dir=$1 || dir="."
	svn info $dir 
}

# xxxxxxxxx

svn_issue ()
{
	svn log $* | grep -i "^issue" | head
}

# xxxxxxxxxx

to_source ()
{
	cd $SOURCE/$*
	clear
	ls
}

# xxxxxxxxxx

to_release ()
{
	cd $RELEASES/$*
	clear
	ls
}

# xxxxxxxxxxx

# xxxxxxxxxxxx

get_pinky_ip ()
{
	export pinky_ip=$PINKY_IP
	if [ -r ~/pinky.txt ]
	then
		export pinky_ip=`cat ~/pinky.txt`
	fi
}

