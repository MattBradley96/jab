#! /bin/sh

# x

y ()
{
	dir=
	if [ -d "$1" ] 
	then
		dir=`abspath $1`
		shift
	fi
	if [ -z "$dir" ]
	then
		dir=$MAIN_PYTHON
	fi
	if [[ $dir != `abspath` ]]
	then
		cd $dir
	fi
	clear
	rf
	ry
	if [ -x ./clean ]
	then 
		./clean
	fi
	tags
	ly $*
	stat
}

# xx

kd ()
{ 
    cd `python ~/.jab/python/kd.py $*`
	stat
}

rf ()
{
	/bin/rm -vrf *~ .*~ *.orig fred* *.tmp *.bak
	for fail in *.fail
	do
		if [ ! -s $fail ]
		then
			/bin/rm -vrf $fail
		fi
	done
}

ru ()
{
	if [ -z "$*" ]
	then 
		sudo -i
	else
		sudo $*
	fi
}

sj ()
{
	svn ci ~/.jab -m"$*"
}


uj ()
{
	cj
	. bashrc
	c-
}

# xxx

cls ()
{
    rf
    clear
    if [ -z "$*" ]
    then
        ls -d `pwd`
        echo
    fi
    ls $*
}

fsh ()
{
	if [ -f fred.sh ]
	then
		sh fred.sh $*
	else
		sh fred $*
	fi
}

fpy ()
{
	if [ -f fred.py ]
	then
		p fred.py $*
	else
		p fred $*
	fi
}

lly ()
{
    ll *.tests
    echo
    ll *.test
    echo
    ll *.py
}

upj ()
{
	if [[ `svn up ~/.jab | grep -v "At revision" | wc -l` != "0" ]]
	then
		uj
	fi
}

vff ()
{
	FRED=
	found_fred=0
	test -f fred && FRED=fred
	if [[ -n $FRED ]]
	then
		found_fred=1
	fi
	found_wild=0
	for f in fred*[^~]
	do
		test -f $f && found_wild=1
	done
	if [[ $found_fred == 1 && $found_wild == 1 ]]
	then 
		v -p fred fred*[^~]
	elif [[ $found_wild == 1 ]]
	then 
		v -p fred*[^~] 
	else
		v fred
	fi
}

# xxxx

tags ()
{
	test -n "$1" && dir=$1 || dir="."
	p ~/.jab/python/ptags.py $dir/*.py
}

do_stat ()
{
	test -n "$1" && path=$1 || path="."
	if [[ -f $path || -d $path/.svn ]]
	then
		svn stat $path
	fi
}

stat ()
{
	if [[ -z "$1" ]]
	then
		do_stat
	else
		for file in $*
		do 
			do_stat $file
		done
	fi
}
# xxxxx

clean ()
{
	test -n "$1" && dir=$1 || dir="."
	find $dir -name "*~" -exec /bin/rm -vrf {} \;
	find $dir -name ".*~" -exec /bin/rm -vrf {} \;
	find $dir -name "*.fail" -size -1 -exec /bin/rm -vrf {} \;
	find $dir -name "fred*" -exec /bin/rm -i {} \;
}

build ()
{
	if [ -d /mnt/source ]
	then 
		ssh builder@ie-build-2
	else
		ssh builder@ie-build-1
	fi
}

kodos ()
{
    pushd /home/builder/Download/ie-build-1/kodos-2.4.9/ >/dev/null
    /usr/bin/python kodos.py &
    popd >/dev/null
}

track ()
{
	if [ -d ~/alans_tests ]
	then
		cd ~/alans_tests
		try
	else
		ssh abrogan@ie-track-1
	fi
}

vfile ()
{
    `echo "$*" | sed -e"s/^File/vim/" | sed -e"s/, line \([0-9]*\).*/ +\1/"`
}

which ()
{ 
    ( alias; declare -f ) | \
		$WHICH --tty-only --read-alias --read-functions --show-tilde --show-dot $@
}

# xxxxx

# xxxxxx


issues ()
{
	if [ -f $HOME/bin/issues ]
	then
		$HOME/bin/issues $*
	else
		mysql -u root -D issues $*
	fi
}

revert ()
{
	cp $1 $1.changed
	svn revert $1
}

# xxxxxxx

svn_log ()
{
	if [ -n "$1" ]
	then
		if [[ -f $1 || -d $1 ]]
		then
			path=$1
			shift 
		fi
	else
		path="."
	fi
    svn log $path | head $*
}

svn_url ()
{
	test -n "$1" && dir=$1 || dir="."
    svn info $dir | grep URL
}

# xxxxxxxx

svn_diff () {
    dir=`dirname $2`
    file=`basename $2`
    pushd "$dir" > /dev/null
    /usr/bin/$1 "$file" .svn/text-base/"$file".svn-base
    popd > /dev/null
}

svn_info ()
{
	test -n "$1" && dir=$1 || dir="."
    svn info $dir 
}

# xxxxxxxxx

svn_issue ()
{
    svn log $* | grep -i "^issue" | head
}

# xxxxxxxxxx

to_source ()
{
	cd $SOURCE/$*
	clear
	ls
}

# xxxxxxxxxx

to_release ()
{
	cd $RELEASES/$*
	clear
	ls
}

# xxxxxxxxxxx

# xxxxxxxxxxxx

get_pinky_ip ()
{
	export pinky_ip=$PINKY_IP
	if [ -r ~/pinky.txt ]
	then
		export pinky_ip=`cat ~/pinky.txt`
	fi
}

