#! /usr/bin/env python
"""Find imports in python files"""
from __future__ import print_function

import linecache
import sys
from collections import defaultdict
from pysyte import imports
from pysyte import scripts

__version__ = '0.2.0'


def add_args(parser):
    """Parse out command line arguments"""
    parser.add_argument('source',
                        help='path to source(s) to be checked')
    parser.add_argument('-e', '--edit', action='store_true',
                        help='Show a command for editing')
    parser.add_argument('-m', '--multiple', action='store_true',
                        help='Show multiple imports')
    parser.add_argument('-u', '--unused', action='store_true',
                        help='Show unused imports')
    parser.add_argument('-t', '--tmp', action='store_true',
                        help='Write to /tmp/imports.txt (not stdout)')


def gather_lines(method):
    result = defaultdict(set)
    for name, lines in method().items():
        for line in lines:
            result[line].add(name)
    return result


def texter(visitor):

    def text(line):
        return '% 4d: %s' % (line, linecache.getline(path, line).rstrip())

    path = visitor.path
    return text


def show_unused(visitor, stream):
    lines = gather_lines(visitor.unused)
    if not lines:
        return []
    text = texter(visitor)
    for line in sorted(lines):
        names = lines[line]
        print(
            '%s\n%s' % (','.join(names), text(line)),
            file=stream)
    return visitor.unused().keys()


def show_multiple(visitor, stream):
    text = texter(visitor)
    multiples = visitor.multiples()
    for name, lines in multiples.items():
        instances = [text(_) for _ in lines]
        print('%s\n%s' % (name, '\n'.join(instances)), file=stream)
    return multiples.keys()


def script(args):
    visitor = imports.extract_imports(args.source)
    stream = open('/tmp/imports.txt', 'w') if args.tmp else sys.stdout
    modules = []
    if args.multiple:
        modules.extend(show_multiple(visitor, stream))
    if args.unused:
        modules.extend(show_unused(visitor, stream))
    if args.edit and modules:
        vim = 'vim -p /tmp/imports.txt' if args.tmp else 'vim'
        print('\n%s %s +/"\<%s\>"' % (
            vim, visitor.path, r'\>\|\<'.join(modules)))
    return bool(modules)


if __name__ == '__main__':
    sys.exit(scripts.main(script, add_args, __version__, __doc__))
