#! /usr/bin/env python2
"""Find imports in python files"""

from __future__ import print_function

import sys
import linecache
import sys
from collections import defaultdict

from dotsite import scripts
from dotsite import imports

__version__ = '0.1.0'


def add_args(parser):
    """Parse out command line arguments"""
    parser.add_argument('source',
                        help='path to source(s) to be checked')
    parser.add_argument('-e', '--edit', action='store_true',
                        help='Show a command for editting')
    parser.add_argument('-u', '--unused', action='store_true',
                        help='Show unused imports')
    parser.add_argument('-t', '--tmp', action='store_true',
                        help='Write to /tmp/imports.txt (not stdout)')


def show_unused(source, editting, stream):
    visitor = imports.extract_imports(source)
    ordered_lines = defaultdict(set)
    for name, lines in visitor.unused().items():
        for line in lines:
            ordered_lines[line].add(name)
    if not ordered_lines:
        return False
    for line in sorted(ordered_lines):
        names = ordered_lines[line]
        print(
            '%s\n% 4d: %s' % (
                ','.join(names),
                line,
                linecache.getline(source, line).rstrip()),
            file=stream)
    if editting:
        vim = 'vim -p /tmp/imports.txt' if editting == 2 else 'vim'
        print(r'\n%s %s +/"\(%s\)"' % (
            vim, source,
            r'\)\|\('.join(visitor.unused().keys())))
    return True


def script(args):
    if args.unused:
        stream = open('/tmp/imports.txt', 'w') if args.tmp else sys.stdout
        editting = 2 if args.edit and args.tmp else args.edit
        return show_unused(args.source, editting, stream)
    return True


if __name__ == '__main__':
    sys.exit(scripts.main(script, add_args, __version__, __doc__))
