#! /bin/bash

_show_status () {
    dir=$1
    local _git="git -C $dir"
    owner=$($_git remote show origin | grep Fetch.URL | cut -d\/ -f 4)
    local local_changes=$($_git status -s)
    local dir_shown=
    if [[ -n $local_changes ]]; then
        echo -e ${PROMPT_LIGHT_GREEN}${dir}${PROMPT_NO_COLOUR}
        dir_shown=1
        $_git status -s
    fi
    local remote_changes=$($_git log --no-color --oneline origin/master --ancestry-path HEAD..origin/master)
    if [[ -z $remote_changes ]]; then
        remote_changes=$($_git fetch --dry-run 2>&1)
    fi
    if [[ -n $remote_changes ]]; then
        if [[ -z $dir_shown ]]; then
            echo -e ${PROMPT_LIGHT_GREEN}${dir}${PROMPT_NO_COLOUR}
            dir_shown=1
        else
            echo
        fi
        if [[ $owner == "jalanb" ]]; then
            $_git fetch -q --all
            $_git lg origin/master --ancestry-path HEAD..origin/master
        fi
        $_git pull --rebase
    fi
    [[ -z $dir_shown ]] || echo
    [[ -n $dir_shown ]] && echo
}

_show_dir () {
    local _path="$1"
    if [[ -d "$_path/.git" ]]; then
        [[ ! -f "$_path/.hubignore" ]] && _show_status "$_path"
    else
        echo Path has no git repo: $_path >&2
    fi
}

_show_dirs () {
    local _hub="$1"
    cd "$_hub"
    for dirname in $(ls)
    do
        local path="$_hub"/$dirname
        [[ $(readlink -f $path) == $(readlink -f ~/jab) ]] && continue
        [[ -d "$path" ]] && _show_dir $path
    done
}

. ~/jab/src/bash/hub.sh

main () {
    if [[ -n $* ]]; then
        _show_dir "$@"
    else
        _show_status ~/jab
        [[ -d ~/hub ]] && _show_dirs ~/hub
    fi
}

main "$@"
