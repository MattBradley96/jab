#! /usr/bin/env python3
"""Show some lines from files"""

from __future__ import print_function
import os
import re
import sys

from dotsite import args as arguments
from dotsite import text_streams


def parse_args():
    """Parse out command line arguments"""
    parser = arguments.parser(__doc__)
    parser.strings('files', help='files to edit')
    parser.num('-a', '--at', default=None, help='Show line at the line number')
    parser.true('-c', '--clipboard', help='Get lines from clipboard')
    parser.add('-f', '--first', default="1",
               help='number/regexp of first line to show')
    parser.add('-l', '--last', default="0",
               help='number/regexp of last line to show')
    parser.true('-n', '--numbers', help='Show line numbers')
    return parser.parse_args()


def parse_lines(args, lines_read):

    def as_int(string):
        try:
            return int(string)
        except (ValueError, TypeError):
            matcher = re.compile(string)
            for i, line in enumerate(lines_read, 1):
                if matcher.search(line):
                    return i
        return 0

    def _line(i):
        line = i if i >= 0 else length_read + 1 + i
        if line >= length_read:
            return length_read
        return 0 if line < 1 else line

    def _boundaries():
        if not args.at:
            last = _line(as_int(args.last) or -1)
            first = _line(as_int(args.first) - 1)
            return first, last
        first = _line(args.at)
        return first, first + 1

    length_read = len(lines_read)
    first, last = _boundaries()
    lines = [] if first > length_read else lines_read[first:last]
    return lines, first


def line_format(lines):
    last_line_number = len(lines)
    digits = len(str(last_line_number))
    return '%%%dd: ' % digits


def show_stream(stream, args):
    text = stream.read()
    lines_in = text.splitlines()
    lines, first = parse_lines(args, lines_in)
    line_format_ = line_format(lines)
    for i, line in enumerate(lines, first):
        prefix = ''
        if args.numbers:
            prefix = line_format_ % (i + 1)
        out = ' '.join((prefix, line.rstrip()))
        print(out)


def main():
    """Run the script"""
    args = parse_args()
    for stream in text_streams.any():
        show_stream(stream, args)
    return os.EX_OK


if __name__ == '__main__':
    sys.exit(main())
