#! /usr/bin/env python2
"""Change a directory with the keyboard"""

from __future__ import print_function
from collections import deque

from dotsite import debuggers
from dotsite import dictionaries
from dotsite import getch
from dotsite.paths import path as makepath
from dotsite import scripts

__version__ = '0.1.0'


def add_args(parser):
    parser.add_argument('path', help='path to source(s) to be checked')


def spin_next(queue):
    queue.rotate(1)
    return queue[0]


def spin_prev(queue):
    queue.rotate(-1)
    return queue[0]


def spin_to(queue, first):
    while queue[0] != first:
        queue.rotate()
    return queue


def enqueue(first, get_parent, get_queue):
    debuggers.debug_here()
    parent = get_parent()
    queue = enqueue(parent) if parent else deque(get_queue())
    return spin_to(queue, first)


def queue_motions(queues):

    # pylint: disable=unused-variable

    def up(path):
        parent = path.parent
        spin_to(queues[parent], path)
        return parent

    def down(path):
        return queues[path][0]

    def left(path):
        return spin_prev(queues[path.parent])

    def right(path):
        return spin_next(queues[path.parent])

    return locals()


def script(args):

    def input_():
        action = getch.get_menu(
            current, quit='[q]?', down='j', up='k', left='l', right=';')
        if action == 'quit':
            raise StopIteration

    def output(path):
        print(path)
        return path

    def cd(path):
        return enqueue(path, path.parent_directory, path.parent.list_dirsfiles)

    queues = dictionaries.LazyDefaultDict(cd)
    motions = queue_motions(queues)
    current = makepath(args.path)
    for action in input_():
        changed = motions.get(action, cd)(current)
        if not changed:
            continue
        current = output(changed)
    return True


if __name__ == '__main__':
    scripts.main(script, add_args, __version__)
