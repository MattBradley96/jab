#! /bin/bash
#
# Link this project into home
# 
# This script must be in a git repo
# Link this script's directory into $HOME
#     for example, if repo was cloned to ~/src/git/hub/repo then
#         cd $HOME; ln -s ~/src/git/hub/repo .
#     Todo: option to use repo name instead of directory name
#
# Link a list of known config files and dirs, mostly to dot (hidden) links
#     hence the name of this file
# TODO: Generalise (currently based on layout of this repo)
#
# See also https://github.com/jalanb/dotjab/commit/6e2e26b455b78a7da51a5e977d7f3fa3c098ddec 

vim_clone_to_home () {
    source="$clone_link"/$1
    destination="$HOME"/$2
    test -f "$destination" && vim -d "$source" "$destination"
    link_clone_to_home "$@"
}

link_clone_to_home () {
    link_into_home "$clone_link"/$1 $2
}

link_into_home () {
    source="$1"
    destination="$HOME"/$2
    [[ -e "$destination" || -L "$destination" ]] && rm -rf "$destination"
    ln -s "$source" "$destination"
}

back_into_home () {
    local _path="$HOME"/$1
    local _file=
    if [[ -f "$_path" ]]; then
        _file="$_path"
    elif [[ -d "$_path" ]]; then
        _file="$_path/$clone_name.bak"
    fi
    echo "#" >> "$_file"
    echo "# $BASH_SOURCE was here" >> "$_file"
    local _backup="$_path.$clone_name.bak"
    cp -r "$_path" "$backup"
    link_clone_to_home "$@"
}

links_into_home () {
    cd $HOME
    vim_clone_to_home etc/gitconfig			.gitconfig
    vim_clone_to_home etc/gitignore_global		.gitignore_global
    vim_clone_to_home src/bash/bashrc		.bashrc
    vim_clone_to_home src/bash/bash_profile		.bash_profile
    vim_clone_to_home src/python/pythonrc.py	.pythonrc.py
    vim_clone_to_home vim/vimrc  			.vimrc
    link_clone_to_home etc/ackrc			.ackrc
    link_clone_to_home etc/dir_colors		.dir_colors
    link_clone_to_home etc/editrc			.editrc
    link_clone_to_home etc/inputrc			.inputrc
    link_clone_to_home etc/pylintrc			.pylintrc
    link_clone_to_home etc/sackrc			.sackrc
    link_clone_to_home etc/tmux			    .tmux.conf
    link_clone_to_home etc/xonshrc			.xonshrc
    link_clone_to_home ipython/			    .ipython
    link_clone_to_home vim				    .vim
    link_clone_to_home vim/gvimrc			.gvimrc
    link_clone_to_home vim/vimpagerrc 		.vimpagerrc
    
    link_into_home ~/src/git/hub        hub
    link_into_home ~/jab/src/bash       bash
    link_into_home ~/jab/src/python     python
}

renew_clone_link () {
    local script_file=$(readlink -f $BASH_SOURCE)
    local script_name=$(basename $script_file)
    local clone_dir=$(dirname $script_file)
          clone_name=$(basename $clone_dir)
          clone_link=~/$clone_name
    local linked_script=$clone_link/$script_name
    if [[ ! -d $clone_dir/.git ]]; then
        echo $clone_dir/.git is not a directory
        echo This script assumed that $clone_dir is root of a clone
        return 2
    fi
    [[ -f $linked_script ]] && return 0
    [[ -f $clone_link ]] && rm -f $clone_link
    [[ -h $clone_link ]] && rm -f $clone_link
    [[ -d $clone_link ]] && mv $clone_link ${clone_link}~
    ln -s $clone_dir $clone_link
    if [[ ! -f $linked_script ]]; then
        echo $linked_script is not a file >&2
        return 1
    fi
    return 0
}

renew_clone_link && links_into_home
