	>>> import analogy 

	>>> def rule_one(a,b):
	...     if a.isdigit() and b.isdigit():
	...         return a + b

	>>> print analogy.join_by_rules(['0','9'],[rule_one])
	['09']
	>>> print analogy.join_by_rules(['0','9','a'],[rule_one])
	['09', 'a']
	>>> print analogy.join_by_rules(['0','9','a','b','3'],[rule_one])
	['09', 'a', 'b', '3']
	>>> print analogy.join_by_rules(['0','9','a','b','3','4','5'],[rule_one])
	['09', 'a', 'b', '345']

	>>> characters = analogy.list_of_characters('Alan was here')
	>>> show(characters)
	[<upper 'A'>,
	 <lower 'l'>,
	 <lower 'a'>,
	 <lower 'n'>,
	 <space ' '>,
	 <lower 'w'>,
	 <lower 'a'>,
	 <lower 's'>,
	 <space ' '>,
	 <lower 'h'>,
	 <lower 'e'>,
	 <lower 'r'>,
	 <lower 'e'>]

	>>> from strip import take
	>>> prefix = characters[:]
	>>> item = None
	>>> suffix = None
	>>> while True:
	...     print repr(prefix), repr(item), repr(suffix)
	...     if suffix and (item[0].lower().islower() and suffix[0].islower()):
	...         item, suffix = [ analogy.twist('letters')(''.join(item + suffix[:1]))], suffix[1:]
	...         continue
	...     if item and item[0].class_name() == 'letters' and not (suffix and suffix[0].islower()):
	...         item = [ analogy.twist('word')(str(item[0])) ]
	...         continue
	...     prefix, item, suffix = take(prefix, item, suffix)
	...     if not suffix: break
	[<upper 'A'>, <lower 'l'>, <lower 'a'>, <lower 'n'>, <space ' '>, <lower 'w'>, <lower 'a'>, <lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>] None None
	[] [<upper 'A'>] [<lower 'l'>, <lower 'a'>, <lower 'n'>, <space ' '>, <lower 'w'>, <lower 'a'>, <lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[] [<letters 'Al'>] [<lower 'a'>, <lower 'n'>, <space ' '>, <lower 'w'>, <lower 'a'>, <lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[] [<letters 'Ala'>] [<lower 'n'>, <space ' '>, <lower 'w'>, <lower 'a'>, <lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[] [<letters 'Alan'>] [<space ' '>, <lower 'w'>, <lower 'a'>, <lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[] [<word 'Alan'>] [<space ' '>, <lower 'w'>, <lower 'a'>, <lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[<word 'Alan'>] [<space ' '>] [<lower 'w'>, <lower 'a'>, <lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[<word 'Alan'>, <space ' '>] [<lower 'w'>] [<lower 'a'>, <lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[<word 'Alan'>, <space ' '>] [<letters 'wa'>] [<lower 's'>, <space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[<word 'Alan'>, <space ' '>] [<letters 'was'>] [<space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[<word 'Alan'>, <space ' '>] [<word 'was'>] [<space ' '>, <lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[<word 'Alan'>, <space ' '>, <word 'was'>] [<space ' '>] [<lower 'h'>, <lower 'e'>, <lower 'r'>, <lower 'e'>]
	[<word 'Alan'>, <space ' '>, <word 'was'>, <space ' '>] [<lower 'h'>] [<lower 'e'>, <lower 'r'>, <lower 'e'>]
	[<word 'Alan'>, <space ' '>, <word 'was'>, <space ' '>] [<letters 'he'>] [<lower 'r'>, <lower 'e'>]
	[<word 'Alan'>, <space ' '>, <word 'was'>, <space ' '>] [<letters 'her'>] [<lower 'e'>]
	[<word 'Alan'>, <space ' '>, <word 'was'>, <space ' '>] [<letters 'here'>] []
	[<word 'Alan'>, <space ' '>, <word 'was'>, <space ' '>] [<word 'here'>] []
	>>> show(prefix)
	[<word 'Alan'>, <space ' '>, <word 'was'>, <space ' '>, <word 'here'>]

