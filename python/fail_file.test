The fail_file module
====================

Facilities to understand *.fail
	which are files containing doctest output

	>>> from fail_file import read_fail_file

FailFile
--------

There is a method to parse a fail file
	>>> import files
	>>> files.write_failing_test('made_earlier.test')
	>>> files.test_file('made_earlier.test')
    True
	>>> fail_file = read_fail_file('made_earlier.fail')

The return is an instance of FailFile
	>>> fail_file
	<FailFile 'made_earlier.fail'>

Which has some attributes
	>>> see( fail_file )
	repr()    .failures    .path_to_fail

Including the file it was read from
	>>> print fail_file.path_to_fail
	made_earlier.fail

The test text had 4 examples, all of which were failures
	>>> 4 == len(fail_file.failures)
	True

Failure
-------

Taking the third one
	>>> failure = fail_file.failures[2]

It has attributes
	>>> see_attributes(failure)
	repr()    .actual    .expected    .line    .path_to_test    .start

Including the file that failure occurred in, and the line number
	>>> print '%s at %s' % ( failure.path_to_test, failure.line )
	made_earlier.test at 6

As well as the expected and actual data (lists of lines for both)
	>>> print '\n'.join(failure.expected)

	>>> print '\n'.join(failure.actual)
	Traceback (most recent call last):
	...
	ZeroDivisionError: integer division or modulo by zero

Is that failure still there ?
	>>> failure.exists()
	True
