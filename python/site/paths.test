The paths module
================

	>>> import sys
	>>> from pprint import pprint
	>>> import paths
	>>> paths.path('.').mp3_files()
	[]

paths reads from environ
	>>> import environ

And looks for paths therein
	It tries anything with a "/"
	>>> environ.EDITOR.endswith('/vim')
	True
	>>> paths.environ.EDITOR.name == 'vim'
	True

Path lists are split up,
	>>> environ.PATH 
	'...:...'
	>>> len(paths.environ.PATH) > 1 
	True

PYTHONPATH is normally used to get local directories into sys.path
	>>> python_paths = [ str(p) for p in paths.environ.PYTHONPATH ]
	>>> all( [ s in sys.path for s in python_paths ] )
	True

The paths module that we are testing got into sys.path through $PYTHONPATH
	>>> test.path.Parent in paths.environ.PYTHONPATH
	True

Handy paths.attributes
----------------------

The user's home directory
	>>> bashrc = paths.home / '.bashrc'
	>>> bashrc.isfile()
	True

Handy paths.methods
-------------------

A path relative to the home directory
	(could be handy for removing the home dir in tests)

	>>> paths.from_home(paths.__file__)
	<path '.jab/python/site/paths.py...'>

	>>> strings = ['~/.jab', '~/.bashrc', '~/.jab/vim/vimrc', 'fred', '/usr']
	>>> paths.files(strings)
	[<Path '/.../.bashrc'>, <Path '/.../.jab/vim/vimrc'>]
	>>> paths.files(strings) == paths.files('~/.jab ~/.bashrc ~/.jab/vim/vimrc fred /usr')
	True
	>>> paths.directories(strings)
	[<Path '/.../.jab'>, <Path '/usr'>]

	>>> paths.split_files(strings)
	([<Path '/.../.bashrc'>, <Path '/.../.jab/vim/vimrc'>], [<Path '/.../.jab'>, <Path '/.../.jab/python/site/fred'>, <Path '/usr'>])
	>>> paths.split_directories(strings)
	([<Path '/.../.jab'>, <Path '/usr'>], [<Path '/.../.bashrc'>, <Path '/.../.jab/vim/vimrc'>, <Path '/.../.jab/python/site/fred'>])

