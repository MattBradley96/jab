ls grammar test
===============

Test whether I can use PyMeta to make a grammar for output of ls -l commands
	>>> from pymeta.grammar import OMeta

	>>> class Filename:
	...     def __init__(self,f,z):
	...         self.name = f
	...         self.size = z

	>>> ls_grammar = file('ls.gy').read()

	>>> ls = OMeta.makeGrammar(ls_grammar, globals(), name="my_ls")

Out to bash for a quick example
$ ls -l ls.test
-rw-r--r--  1 jab  jabs  811 20 Jan 04:08 ls.test
$ ls -lh ls.test
-rw-r--r--  1 jab  jabs   811B 20 Jan 04:08 ls.test

But this file isn't big enough to change the number,
	more waffle fits in here
	should be over the kilo soon

$ ls -lh ls.test
-rw-r--r--  1 jab  jabs   1.0K 20 Jan 04:10 ls.test
$ ls -l ls.test
-rw-r--r--  1 jab  jabs  1033 20 Jan 04:10 ls.test

Start with the last
	>>> test_string = " -rw-r--r--  1 jab  jabs  1033 20 Jan 04:10 ls.test"

	>>> ls_parser = ls(test_string)
	>>> print ls_parser
	 <pymeta_grammar__my_ls.my_ls object at 0x...>

	>>> f = ls_parser.apply('ls_out')
	>>> print f.name, f.size
	ls.test 1033

Let's try the other one
	>>> test_string = " -rw-r--r--  1 jab  jabs   1.0K 20 Jan 04:10 ls.test"
	>>> ls_parser = ls(test_string)
	>>> f = ls_parser.apply('ls_out')
	>>> print f.name, f.size
	ls.test 1024
