The twine module
================

	>>> from twine import Twine

A Twine is ako string
	>>> fred = Twine('Fred')
	>>> print fred
	Fred

With a different representation than string
	>>> fred
	<Twine 'Fred'>

And can parse out its class name
	>>> print fred.class_name(), fred.full_class_name(), fred.list_name()
	Twine twine.Twine Twines

A subclass of Twine
	>>> class Freddy(Twine): pass
	>>> fred = Freddy('Fred')

is also ako string
	>>> print fred
	Fred

and knows its class
	>>> fred
	<Freddy 'Fred'>

and parses its name
	Note:
		full class name has no module as it was created in this script
	Note again:
		This is now version dependent, 2.7 calls this script's module "__main__"
	>>> print fred.class_name(), fred.full_class_name(), fred.list_name()
	Freddy ...Freddy Freddies

I think this one is a meta-sub-class
	but it might be a sub-meta-class.
	Anyway, the class name you provide is sent into a method
	>>> from twine import twist
	>>> Teddy = twist('Teddy')

And that gives you a new class
	>>> ted = Teddy('ted')

which is also ako string
	>>> print ted
	ted

and knows its class
	>>> ted
	<Teddy 'ted'>

and parses its name
	>>> print ted.class_name(), ted.full_class_name(), ted.list_name()
	Teddy twine.Teddy Teddies
