Parsing test files
==================

Facilities to parse *.test

The test_file module provides a method
	to parse files like these
	>>> from test_file import parse
	>>> test_file = parse('test_file.test')
	>>> see( test_file )
	repr()    str()    .examples    .path_to_file    .sections    .source

Having parsed it, we can see that this file has some sections
	(Scroll down to verify these)
	>>> show(test_file.sections)
	[<Section Parsing test files
		Data
		Continuations>,
	 <Section Another main section>]

This is the first section of this file

	It has some examples
		which are counted once for each full line of python
		regardless of other lines

	So the next line of python is the fifth example
	>>> example = test_file.sections[0].examples[5]

I expect this example to have one line each for text, code, result

	>>> print example.python[0]
	print example.python[0]

That was an unusual test:
	what we expected was the same as the python
	>>> print example.expected == example.python
	True

The text was collected up from before the code:
	>>> print example.text
	I expect this example to have one line each for text, code, result

Data
----

The python can give some data
	>>> 3 + 5
	8

	>>> print 'hello world'
	hello world

This is the first subsection of the first section of the file
	>>> print test_file.sections[0].sections[0].examples[2].text
	This is the first subsection of the first section of the file

The test file also has the collection of examples as a single list
	There were 7 examples in first part of the main section
	plus 2 examples before "This is the first ..."
	So that should be the 10th in this file
	>>> test_file.sections[0].sections[0].examples[2] == test_file.examples[10]
	True

Continuations
-------------

Python can be continued over many lines
	so can the data
	>>> for i in range(0,5):
	...     if i > 2:
	...         print i
	3
	4

Another main section
====================

I rarely use a second main section myself.
	but it is a test file
	so we better test it

Every section must include some python
	>>> i
	4

