The fail_file module
====================
Facilities to understand *.fail
	which are files containing doctest output

	>>> from fail_file import fail_file

	>>> def to_tree(rule,source):
	...     show(fail_file(source).apply(rule))

	>>> def to_text(rule,source):
	...     print fail_file([source]).apply(rule)

	>>> def tree_text(tree,source,text=None):
	...     if not text: text = '%s_text' % tree
	...     ast = fail_file(source).apply(tree)
	...     show(ast)
	...     print '=== header ==='
	...     translate.write_file = 'header'
	...     print fail_file([ast]).apply(text)
	...     print '=== cpp ==='
	...     translate.write_file = 'cpp'
	...     print fail_file([ast]).apply(text)


	
	>>> to_tree('string','"free"')
	'free'
	>>> to_tree('string',"'free'")
	'free'

	>>> to_tree('file_line','File "/Users/jab/jab/alto/dev/RIAS_XP/src/python/translate.tests", line 16, in translate.tests\n')
	['/Users/jab/jab/alto/dev/RIAS_XP/src/python/translate.tests', 16]

	>>> to_tree('line','Failed example:\n')
	'Failed example:'

	>>> to_tree('lines',"    to_tree('method_call', 'fred.murphy()')\n")
	["    to_tree('method_call', 'fred.murphy()')"]

	>>> to_tree('expected_header','Expected:\n')
	[]

	>>> to_tree('lines',"    [['Fred', 'Murphy'], None]\n")
	["    [['Fred', 'Murphy'], None]"]

	>>> to_tree('actual_header','Got:\n')
	[]

	>>> to_tree('lines',"    [['Fred', 'Murphy'], []]\n")
	["    [['Fred', 'Murphy'], []]"]

	>>> fail_text = '''**********************************************************************
	... File "not_a_real_file.tests", line 39, in not_a_real_file.tests
	... Failed example:
	...     to_tree('lines',"    [['Fred', 'Murphy'], []]")
	... Expected:
	...     ["    [['red', 'Murphy'], []]"]
	... Got:
	...     ["    [['Fred', 'Murphy'], []]"]
	... **********************************************************************
	... File "not_a_real_file.tests", line 39, in not_a_real_file.tests
	... Failed example:
	...     import sorting
	... Exception raised:
	...     Traceback (most recent call last):
	...       File "/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/doctest.py", line 1212, in __run
	...         compileflags, 1) in test.globs
	...       File "<doctest fred.test[1]>", line 1, in <module>
	...         import sorting
	...     ImportError: No module named sorting
	... **********************************************************************
	... 2 items had failures:
	...    2 of  13 in not_a_real_file.tests
	... ***Test Failed*** 2 failures.
	... '''

	>>> to_tree('fail_file',fail_text)
	<FailFile not_a_real_file.tests>

	>>> fixer = fail_file(fail_text).apply('failure')

	>>> print fixer.filename
	not_a_real_file.tests

	>>> fixer.exists()
	False

	>>> fixer.needed()
	False

