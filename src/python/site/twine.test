The twine module
================

    >>> from twine import Twine

A Twine is ako string
    >>> twine = Twine('Fred')
    >>> assert twine == "Fred"

With a different representation than str
    >>> twine
    <Twine 'Fred'>

And can parse out its class name
    >>> assert twine.class_name() == 'Twine'
    >>> assert twine.full_class_name() == 'twine.Twine'
    >>> assert twine.list_name() == 'Twines'

A subclass of Twine
    >>> class Freddy(Twine): pass
    >>> twine = Freddy('Fred')

is also ako string
    >>> assert twine == 'Fred'

and knows its class
    >>> twine
    <Freddy 'Fred'>

and parses its name
    Note:
        full class name has no module as it was created in this script
    Note again:
        This is now version dependent, 2.7 calls this script's module "__main__"
    >>> assert twine.class_name() == 'Freddy'
    >>> assert twine.full_class_name().endswith('Freddy')
    >>> assert twine.list_name() == 'Freddies'

I think this one is a meta-sub-class
    but it might be a sub-meta-class.
    Anyway, the class name you provide is sent into a method
    >>> from twine import twist
    >>> Teddy = twist('Teddy')

And that gives you a new class
    >>> ted = Teddy('ted')

which is also ako string
    >>> assert ted == 'ted'

and knows its class
    >>> ted
    <Teddy 'ted'>

and parses its name
    >>> assert ted.class_name() == 'Teddy'
    >>> assert ted.full_class_name() == 'twine.Teddy'
    >>> assert ted.list_name() == 'Teddies'
