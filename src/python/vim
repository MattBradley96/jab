#! /usr/bin/env python2
"""Script to provide entry to the vim script"""

from __future__ import print_function
import os
import sys
from bdb import BdbQuit


__version__ = '0.1.0'


from vim_script import vim_main


class ScriptError(NotImplementedError):
    pass


def version(args):
    print('%s %s' % (args, __version__))
    raise SystemExit


def Use_debugger(_args):
    try:
        import pudb as pdb
    except ImportError:
        import pdb
    pdb.set_trace()


def parse_args(methods):
    """Parse out command line arguments"""

    import argparse
    parser = argparse.ArgumentParser(description=__doc__.splitlines()[0])

    class Arg(object):
        def __init__(self, k, v):
            self._key = k
            self._value = v


    class Args(object):
        def __init__(self, a):
            self._args = a.__dict__.copy()

        def __contains__(self, item):
            return self._args[item]

    class PredicatedArgs(Args):
        def __init__(self, predicate, a):
            super(PredicatedArgs, self).__init__(a)
            self._predicate = predicate

        def _predicate(self, x):
            return bool(x)

        def __iter__(self):
            for _ in self._args:
                if self._predicate(_):
                    yield _

    def _has_value(_):
        _, value = _
        return bool(value)

    class ValuedArgs(PredicatedArgs):
        def __init__(self, a):
            super(ValuedArgs, self).__init__(_has_value, a)

    def _run_args(args):
        """Run any methods eponymous with args"""
        valued_args = ValuedArgs(args)

        args_with_values = {k:v for k, v in _value_args.items() if v}
        method_args = [_ for _ in valued_args.items() if _ in methods]
        [methods[_](args) for _ in method_args]

        arg_methods = {methods[_] for _ in valued_args if _ in methods}
        for method in arg_methods:
            method(args)
        return args

    def _add_argument(*args, **kwargs):
        kwargs['action'] = kwargs.get('action', 'store_true')
        parser.add_argument(*args, **kwargs)

    def _parse_args():
        _args = parser.parse_args()
        _run_args(args)

    _add_argument('-v', '--version')
    _add_argument('-U', '--use_debugger')
    _add_argument('files', 'files to edit')
    args = _parse_args()

    return args


def main():
    """Run the script"""
    try:
        args = parse_args(globals())
        return vim_main(args)
    except BdbQuit:
        pass
    except SystemExit as e:
        return e.code
    except Exception, e:  # pylint: disable=broad-except
        if __version__[0] < '1':
            raise
        print(e, sys.stderr)
        return not os.EX_OK
    return os.EX_OK


if __name__ == '__main__':
    sys.exit(main())
