#! /bin/bash -x

    if test -d $HOME/lib -a -n "$(find $HOME/lib -maxdepth 1 -name 'libpython*' -print -quit)"; then
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/lib
    fi
}

# set -x

_bashrc () {
    local init_=$home_user_/__init__.sh
    if [[ -f $init_ ]]; then
        # echo "PATH is $(echo $PATH | sed -e "s,:,:    ,g" | tr ':' '\n')"
        # echo "PSI is $PS1"
        # echo "Here is $(readlink -f .)"
        source $init_
        sp green
        echo "PATH is $(echo $PATH | sed -e "s,:,:    ,g" | tr ':' '\n')"
        # echo "PSI is $PS1"
        echo "Here is $(readlink -f .)"
    fi
    # set +x
    # set -x
    # /usr/bin/say -v Anna Ich mÃ¶chte eine Maschine, die schreiben kann, wie ich kann &
}

BASHRC_LOG=~/log/bashrc.log
vbb () {
    # set -x
    local _log=
    test -f $BASHRC_LOG && _log=$BASHRC_LOG
    (
        cd $home_user
        local local__=
        test -f local/__init__.sh && local__=local/__init__.sh
        vim -p ~/.bashrc __init__.sh environ.d/__init__.sh src/bash/__init__.sh $local__ ~/.vimrc $_log "$@"
        readlink -f ~/.bashrc __init__.sh environ.d/__init__.sh src/bash/__init__.sh $local__ ~/.vimrc $_log
    )
    [[ -f $_log ]] && mv $_log ~/log 2>/dev/null
}

vbl () {
    # set -x
    [[ -f $BASHRC_LOG ]] || return 1
    vim $BASHRC_LOG
}

log_main () {
    set -x
    [[ $- =~ i ]] && main > $BASHRC_LOG 2>&1
    set +x
}

_local () {
    . $home_user/local/__init__.sh optional
}

main () {
    [[ $- =~ i ]] || return
    _set_path
    _bashrc $home_user
    _local
    set +m
}

# echo bashrc
main  "$@"
# log_main "$@"

set +x
