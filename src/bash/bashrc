#! /bin/bash -x

[[ -n $WELCOME_BYE ]] && echo Welcome to ~/.bashrc on $(hostname -f)

_set_path () {
    LOCAL=/usr/local
    [[ -d $LOCAL/gnu ]] && LOCALS="$LOCAL/gnu:$LOCAL/bin" || LOCALS="$LOCAL/bin"
    BINS=/usr/bin:/bin:/usr/sbin:/sbin
    HOMES=$HOME/bin:$HOME/.local
    export PATH=$LOCALS:$BINS:$HOMES
    export STDOUT=on
    export STDERR=on

    [[ -d $LOCAL/go/bin ]] && PATH=$PATH:$LOCAL/go/bin
}

_home_user=$HOME/$USER

_bashrc () {
    WELCOME_BYE=
    source $_home_user/__init__.sh
    WELCOME_BYE=
    local_rc $_home_user
    local _local_rc=$?
    export PS1="\$? [\u@\h:\$PWD]\n$ "
    sp
    # /usr/bin/say -v Moira I want a Slack bot, ..., that says the build channel &
    /usr/bin/say -v Anna Ich mÃ¶chte eine Maschine, die schreiben kann, wie ich kann &
    [[ $_local_rc == 0 ]] || bash /Users/jab/src/git/hub/jab3/bin/dttc
    cd ~/jab # >/dev/null 2>&1
}

BASHRC_LOG=~/bashrc.log
vbb () {
    local _log=
    test -f $BASHRC_LOG && _log=$BASHRC_LOG
    (cd $_home_user
    vim -p ~/.bashrc __init__.sh src/bash/__init__.sh $_log "$@" +/"WELCOME_BYE="
    ls  ~/.bashrc __init__.sh src/bash/__init__.sh $_log)
    [[ -f $_log ]] && mv $_log ~/log
}

vbl () {
    [[ -f $BASHRC_LOG ]] || return 1
    vim $BASHRC_LOG 
}

log_main () {
    set -x
    [[ $- =~ i ]] && main > $BASHRC_LOG 2>&1
    set +x
}

_local () {
    source_what $_home_user/local/__init__.sh optional
}

main () {
    _set_path
    _bashrc $_home_user
    _local
    set +m
}

# echo bashrc
main  "$@"
# log_main "$@"

[[ -n $WELCOME_BYE ]] && echo Bye from ~/.bashrc on $(hostname -f)
